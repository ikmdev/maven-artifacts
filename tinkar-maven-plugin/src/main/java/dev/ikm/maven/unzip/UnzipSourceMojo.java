/*
 * Copyright Â© 2015 Integrated Knowledge Management (support@ikm.dev)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dev.ikm.maven.unzip;

import org.apache.commons.io.FileUtils;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

@Mojo(name = "unzip-source", defaultPhase = LifecyclePhase.PROCESS_SOURCES)
public class UnzipSourceMojo extends AbstractMojo {

    @Parameter(property = "source", required = true)
    private File source;

    @Parameter(defaultValue = ".DS_Store,__MACOSX", property = "ignoreFiles", required = true)
    private List<String> ignoreFiles;

    @Parameter(property = "outputDirectory", defaultValue = "${project.build.directory}")
    private File outputDirectory;

    /**
     * Executes the Mojo to unzip originFile to the originSources directory
     * @throws MojoExecutionException - Exception generated by maven plugin archetype
     * @throws MojoFailureException - Exception generated by maven plugin archetype
     */
    @Override
    public void execute() throws MojoExecutionException {
        try (FileInputStream fileInputStream = new FileInputStream(source);
             ZipInputStream zipInputStream = new ZipInputStream(fileInputStream)) {

            /*
             * Since we are aligning this Mojo to "process sources" the /target directory
             * hasn't been created in the maven lifecycle yet, so we will create it
             * regardless. Some of the else logic is trying to handle the case where a user
             * doesn't run "clean" before another "deploy" while using this plugin.
             *
             * This also can be set to be some other directory and will see if it needs to be
             * created. isDirectory() checks for both if file exists and if File is directory type.
             * Using createDirectories helps if the parent directory supplied doesn't exist.
             */
            if (outputDirectory.isDirectory()) {
                FileUtils.deleteDirectory(outputDirectory);
                Files.createDirectory(outputDirectory.toPath());
            } else {
                Files.createDirectories(outputDirectory.toPath());
            }

            //The below algorithm was ported over from: https://www.baeldung.com/java-compress-and-uncompress
            byte[] buffer = new byte[1024];
            ZipEntry zipEntry = zipInputStream.getNextEntry();
            while (zipEntry != null) {
                if (checkIgnore(zipEntry.getName())) {
                    continue;
                }
                File newFile = newFile(outputDirectory, zipEntry);
                if (zipEntry.isDirectory()) {
                    if (!newFile.isDirectory() && !newFile.mkdirs()) {
                        throw new IOException("Failed to create directory " + newFile);
                    }
                } else {
                    // fix for Windows-created archives
                    File parent = newFile.getParentFile();
                    if (!parent.isDirectory() && !parent.mkdirs()) {
                        throw new IOException("Failed to create directory " + parent);
                    }

                    // write file content
                    FileOutputStream fos = new FileOutputStream(newFile);
                    int len;
                    while ((len = zipInputStream.read(buffer)) > 0) {
                        fos.write(buffer, 0, len);
                    }
                    fos.close();
                }
                zipEntry = zipInputStream.getNextEntry();
            }
            zipInputStream.closeEntry();
		}catch (IOException e){
            getLog().error(e.getMessage(), e);
            throw new MojoExecutionException(e.getMessage(), e);
        }
    }

    /**
     * Checks to see if the file is on the ignore list
     * @param fileName - Name of file being processed during unzip
     * @return - Boolean representing if the file is on the ignore list or not
     */
    private boolean checkIgnore(String fileName){
        for (String name : ignoreFiles){
            if (fileName.contains(name)) {
                return true;
            }
        }
        return false;
    }

    public static File newFile(File destinationDir, ZipEntry zipEntry) throws IOException {
        File destFile = new File(destinationDir, zipEntry.getName());

        String destDirPath = destinationDir.getCanonicalPath();
        String destFilePath = destFile.getCanonicalPath();

        if (!destFilePath.startsWith(destDirPath + File.separator)) {
            throw new IOException("Entry is outside of the target dir: " + zipEntry.getName());
        }
        return destFile;
    }
}
